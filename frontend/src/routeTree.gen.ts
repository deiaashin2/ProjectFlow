/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as LogInImport } from './routes/log-in'
import { Route as GroupsRouteImport } from './routes/groups/route'
import { Route as IndexImport } from './routes/index'
import { Route as GroupsIndexImport } from './routes/groups/index'
import { Route as GroupsGroupIdTaskManagementImport } from './routes/groups/$groupId/task-management'
import { Route as GroupsGroupIdTaskEditorImport } from './routes/groups/$groupId/task-editor'
import { Route as GroupsGroupIdMessagesImport } from './routes/groups/$groupId/messages'
import { Route as GroupsGroupIdInformationHubImport } from './routes/groups/$groupId/information-hub'

// Create/Update Routes

const SignUpRoute = SignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const LogInRoute = LogInImport.update({
  id: '/log-in',
  path: '/log-in',
  getParentRoute: () => rootRoute,
} as any)

const GroupsRouteRoute = GroupsRouteImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GroupsIndexRoute = GroupsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GroupsRouteRoute,
} as any)

const GroupsGroupIdTaskManagementRoute =
  GroupsGroupIdTaskManagementImport.update({
    id: '/$groupId/task-management',
    path: '/$groupId/task-management',
    getParentRoute: () => GroupsRouteRoute,
  } as any)

const GroupsGroupIdTaskEditorRoute = GroupsGroupIdTaskEditorImport.update({
  id: '/$groupId/task-editor',
  path: '/$groupId/task-editor',
  getParentRoute: () => GroupsRouteRoute,
} as any)

const GroupsGroupIdMessagesRoute = GroupsGroupIdMessagesImport.update({
  id: '/$groupId/messages',
  path: '/$groupId/messages',
  getParentRoute: () => GroupsRouteRoute,
} as any)

const GroupsGroupIdInformationHubRoute =
  GroupsGroupIdInformationHubImport.update({
    id: '/$groupId/information-hub',
    path: '/$groupId/information-hub',
    getParentRoute: () => GroupsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/groups': {
      id: '/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsRouteImport
      parentRoute: typeof rootRoute
    }
    '/log-in': {
      id: '/log-in'
      path: '/log-in'
      fullPath: '/log-in'
      preLoaderRoute: typeof LogInImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/groups/': {
      id: '/groups/'
      path: '/'
      fullPath: '/groups/'
      preLoaderRoute: typeof GroupsIndexImport
      parentRoute: typeof GroupsRouteImport
    }
    '/groups/$groupId/information-hub': {
      id: '/groups/$groupId/information-hub'
      path: '/$groupId/information-hub'
      fullPath: '/groups/$groupId/information-hub'
      preLoaderRoute: typeof GroupsGroupIdInformationHubImport
      parentRoute: typeof GroupsRouteImport
    }
    '/groups/$groupId/messages': {
      id: '/groups/$groupId/messages'
      path: '/$groupId/messages'
      fullPath: '/groups/$groupId/messages'
      preLoaderRoute: typeof GroupsGroupIdMessagesImport
      parentRoute: typeof GroupsRouteImport
    }
    '/groups/$groupId/task-editor': {
      id: '/groups/$groupId/task-editor'
      path: '/$groupId/task-editor'
      fullPath: '/groups/$groupId/task-editor'
      preLoaderRoute: typeof GroupsGroupIdTaskEditorImport
      parentRoute: typeof GroupsRouteImport
    }
    '/groups/$groupId/task-management': {
      id: '/groups/$groupId/task-management'
      path: '/$groupId/task-management'
      fullPath: '/groups/$groupId/task-management'
      preLoaderRoute: typeof GroupsGroupIdTaskManagementImport
      parentRoute: typeof GroupsRouteImport
    }
  }
}

// Create and export the route tree

interface GroupsRouteRouteChildren {
  GroupsIndexRoute: typeof GroupsIndexRoute
  GroupsGroupIdInformationHubRoute: typeof GroupsGroupIdInformationHubRoute
  GroupsGroupIdMessagesRoute: typeof GroupsGroupIdMessagesRoute
  GroupsGroupIdTaskEditorRoute: typeof GroupsGroupIdTaskEditorRoute
  GroupsGroupIdTaskManagementRoute: typeof GroupsGroupIdTaskManagementRoute
}

const GroupsRouteRouteChildren: GroupsRouteRouteChildren = {
  GroupsIndexRoute: GroupsIndexRoute,
  GroupsGroupIdInformationHubRoute: GroupsGroupIdInformationHubRoute,
  GroupsGroupIdMessagesRoute: GroupsGroupIdMessagesRoute,
  GroupsGroupIdTaskEditorRoute: GroupsGroupIdTaskEditorRoute,
  GroupsGroupIdTaskManagementRoute: GroupsGroupIdTaskManagementRoute,
}

const GroupsRouteRouteWithChildren = GroupsRouteRoute._addFileChildren(
  GroupsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/groups': typeof GroupsRouteRouteWithChildren
  '/log-in': typeof LogInRoute
  '/sign-up': typeof SignUpRoute
  '/groups/': typeof GroupsIndexRoute
  '/groups/$groupId/information-hub': typeof GroupsGroupIdInformationHubRoute
  '/groups/$groupId/messages': typeof GroupsGroupIdMessagesRoute
  '/groups/$groupId/task-editor': typeof GroupsGroupIdTaskEditorRoute
  '/groups/$groupId/task-management': typeof GroupsGroupIdTaskManagementRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/log-in': typeof LogInRoute
  '/sign-up': typeof SignUpRoute
  '/groups': typeof GroupsIndexRoute
  '/groups/$groupId/information-hub': typeof GroupsGroupIdInformationHubRoute
  '/groups/$groupId/messages': typeof GroupsGroupIdMessagesRoute
  '/groups/$groupId/task-editor': typeof GroupsGroupIdTaskEditorRoute
  '/groups/$groupId/task-management': typeof GroupsGroupIdTaskManagementRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/groups': typeof GroupsRouteRouteWithChildren
  '/log-in': typeof LogInRoute
  '/sign-up': typeof SignUpRoute
  '/groups/': typeof GroupsIndexRoute
  '/groups/$groupId/information-hub': typeof GroupsGroupIdInformationHubRoute
  '/groups/$groupId/messages': typeof GroupsGroupIdMessagesRoute
  '/groups/$groupId/task-editor': typeof GroupsGroupIdTaskEditorRoute
  '/groups/$groupId/task-management': typeof GroupsGroupIdTaskManagementRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/groups'
    | '/log-in'
    | '/sign-up'
    | '/groups/'
    | '/groups/$groupId/information-hub'
    | '/groups/$groupId/messages'
    | '/groups/$groupId/task-editor'
    | '/groups/$groupId/task-management'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/log-in'
    | '/sign-up'
    | '/groups'
    | '/groups/$groupId/information-hub'
    | '/groups/$groupId/messages'
    | '/groups/$groupId/task-editor'
    | '/groups/$groupId/task-management'
  id:
    | '__root__'
    | '/'
    | '/groups'
    | '/log-in'
    | '/sign-up'
    | '/groups/'
    | '/groups/$groupId/information-hub'
    | '/groups/$groupId/messages'
    | '/groups/$groupId/task-editor'
    | '/groups/$groupId/task-management'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GroupsRouteRoute: typeof GroupsRouteRouteWithChildren
  LogInRoute: typeof LogInRoute
  SignUpRoute: typeof SignUpRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GroupsRouteRoute: GroupsRouteRouteWithChildren,
  LogInRoute: LogInRoute,
  SignUpRoute: SignUpRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/groups",
        "/log-in",
        "/sign-up"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/groups": {
      "filePath": "groups/route.tsx",
      "children": [
        "/groups/",
        "/groups/$groupId/information-hub",
        "/groups/$groupId/messages",
        "/groups/$groupId/task-editor",
        "/groups/$groupId/task-management"
      ]
    },
    "/log-in": {
      "filePath": "log-in.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/groups/": {
      "filePath": "groups/index.tsx",
      "parent": "/groups"
    },
    "/groups/$groupId/information-hub": {
      "filePath": "groups/$groupId/information-hub.tsx",
      "parent": "/groups"
    },
    "/groups/$groupId/messages": {
      "filePath": "groups/$groupId/messages.tsx",
      "parent": "/groups"
    },
    "/groups/$groupId/task-editor": {
      "filePath": "groups/$groupId/task-editor.tsx",
      "parent": "/groups"
    },
    "/groups/$groupId/task-management": {
      "filePath": "groups/$groupId/task-management.tsx",
      "parent": "/groups"
    }
  }
}
ROUTE_MANIFEST_END */

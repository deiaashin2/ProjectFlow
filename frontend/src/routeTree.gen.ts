/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as GroupsIndexImport } from './routes/groups/index'
import { Route as GroupsGroupIdTaskManagementImport } from './routes/groups/$groupId/task-management'
import { Route as GroupsGroupIdMessagesImport } from './routes/groups/$groupId/messages'
import { Route as GroupsGroupIdInformationHubImport } from './routes/groups/$groupId/information-hub'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GroupsIndexRoute = GroupsIndexImport.update({
  id: '/groups/',
  path: '/groups/',
  getParentRoute: () => rootRoute,
} as any)

const GroupsGroupIdTaskManagementRoute =
  GroupsGroupIdTaskManagementImport.update({
    id: '/groups/$groupId/task-management',
    path: '/groups/$groupId/task-management',
    getParentRoute: () => rootRoute,
  } as any)

const GroupsGroupIdMessagesRoute = GroupsGroupIdMessagesImport.update({
  id: '/groups/$groupId/messages',
  path: '/groups/$groupId/messages',
  getParentRoute: () => rootRoute,
} as any)

const GroupsGroupIdInformationHubRoute =
  GroupsGroupIdInformationHubImport.update({
    id: '/groups/$groupId/information-hub',
    path: '/groups/$groupId/information-hub',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/groups/': {
      id: '/groups/'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsIndexImport
      parentRoute: typeof rootRoute
    }
    '/groups/$groupId/information-hub': {
      id: '/groups/$groupId/information-hub'
      path: '/groups/$groupId/information-hub'
      fullPath: '/groups/$groupId/information-hub'
      preLoaderRoute: typeof GroupsGroupIdInformationHubImport
      parentRoute: typeof rootRoute
    }
    '/groups/$groupId/messages': {
      id: '/groups/$groupId/messages'
      path: '/groups/$groupId/messages'
      fullPath: '/groups/$groupId/messages'
      preLoaderRoute: typeof GroupsGroupIdMessagesImport
      parentRoute: typeof rootRoute
    }
    '/groups/$groupId/task-management': {
      id: '/groups/$groupId/task-management'
      path: '/groups/$groupId/task-management'
      fullPath: '/groups/$groupId/task-management'
      preLoaderRoute: typeof GroupsGroupIdTaskManagementImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/groups': typeof GroupsIndexRoute
  '/groups/$groupId/information-hub': typeof GroupsGroupIdInformationHubRoute
  '/groups/$groupId/messages': typeof GroupsGroupIdMessagesRoute
  '/groups/$groupId/task-management': typeof GroupsGroupIdTaskManagementRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/groups': typeof GroupsIndexRoute
  '/groups/$groupId/information-hub': typeof GroupsGroupIdInformationHubRoute
  '/groups/$groupId/messages': typeof GroupsGroupIdMessagesRoute
  '/groups/$groupId/task-management': typeof GroupsGroupIdTaskManagementRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/groups/': typeof GroupsIndexRoute
  '/groups/$groupId/information-hub': typeof GroupsGroupIdInformationHubRoute
  '/groups/$groupId/messages': typeof GroupsGroupIdMessagesRoute
  '/groups/$groupId/task-management': typeof GroupsGroupIdTaskManagementRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/groups'
    | '/groups/$groupId/information-hub'
    | '/groups/$groupId/messages'
    | '/groups/$groupId/task-management'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/groups'
    | '/groups/$groupId/information-hub'
    | '/groups/$groupId/messages'
    | '/groups/$groupId/task-management'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/groups/'
    | '/groups/$groupId/information-hub'
    | '/groups/$groupId/messages'
    | '/groups/$groupId/task-management'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  GroupsIndexRoute: typeof GroupsIndexRoute
  GroupsGroupIdInformationHubRoute: typeof GroupsGroupIdInformationHubRoute
  GroupsGroupIdMessagesRoute: typeof GroupsGroupIdMessagesRoute
  GroupsGroupIdTaskManagementRoute: typeof GroupsGroupIdTaskManagementRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  GroupsIndexRoute: GroupsIndexRoute,
  GroupsGroupIdInformationHubRoute: GroupsGroupIdInformationHubRoute,
  GroupsGroupIdMessagesRoute: GroupsGroupIdMessagesRoute,
  GroupsGroupIdTaskManagementRoute: GroupsGroupIdTaskManagementRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/groups/",
        "/groups/$groupId/information-hub",
        "/groups/$groupId/messages",
        "/groups/$groupId/task-management"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/groups/": {
      "filePath": "groups/index.tsx"
    },
    "/groups/$groupId/information-hub": {
      "filePath": "groups/$groupId/information-hub.tsx"
    },
    "/groups/$groupId/messages": {
      "filePath": "groups/$groupId/messages.tsx"
    },
    "/groups/$groupId/task-management": {
      "filePath": "groups/$groupId/task-management.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
